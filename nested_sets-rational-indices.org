#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1 reveal_history:nil
#+OPTIONS: reveal_keyboard:t reveal_overview:t reveal_progress:t
#+OPTIONS: reveal_rolling_links:nil reveal_single_file:nil
#+OPTIONS: reveal_slide_number:"c" reveal_title_slide:auto reveal_width:-1
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: /home/dylan/node_modules/reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: moon
#+REVEAL_EXTRA_CSS:
#+REVEAL_EXTRA_JS:
#+REVEAL_HLEVEL:
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_POSITION:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_POSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_SLIDE_HEADER:
#+REVEAL_SLIDE_FOOTER:
#+REVEAL_PLUGINS:
#+REVEAL_DEFAULT_FRAG_STYLE:
#+REVEAL_INIT_SCRIPT:
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css

#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:nil
#+OPTIONS: tasks:nil tex:nil timestamp:nil title:t toc:nil todo:nil |:t
#+TITLE: Nested Sets II: Optimizing with Rational Keys
#+DATE: <2017-02-03 Fri>
#+AUTHOR: Dylan Kendal
#+EMAIL: dylankendal@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 9.0.3)



* Tasks                                                            :noexport:

** research notes from paper
   :LOGBOOK:
   CLOCK: [2017-02-03 Fri 13:12]
   :END:
* Intro
** What is a Tree
   #+BEGIN_SRC dot :file tree.png :cmdline -Kdot -Tpng :cache true
     digraph {
       "1" -> "1.1"
       "1" -> "1.2"
       "1" -> "1.3"
       "1" -> "1.4"

       "1.3" -> "1.3.1"
       "1.3" -> "1.3.2"
       "1.3" -> "1.3.3"
       "1.3" -> "1.3.4"
       "1.3" -> "1.3.5"

       "1.3.3" -> "1.3.3.1"
       "1.3.3" -> "1.3.3.2"
       "1.3.3" -> "1.3.3.3"
       "1.3.3.3" -> "1.3.3.4"
   }
   #+END_SRC

   #+RESULTS:
   [[file:tree.png]]

   #+BEGIN_NOTES
   Node label indicates the tree position in this example.
   e.g. 1.3 is the 3^rd child of the 1^st node.
   #+END_NOTES

** What is a Nested Set?
*** A way of representing heirarichal data...

   #+BEGIN_SRC dot :file nested-sets1.png :cmdline -Kdot -Tpng :cache true
     digraph {
       "1" [label=<<sub>1</sub>[.1]<sub>2</sub>>]
       "2" [label=<<sub>3</sub>[.2]<sub>20</sub>>]
       "3" [label=<<sub>21</sub>[.3]<sub>22</sub>>]
       "2.1" [label=<<sub>4</sub>[.2.1]<sub>5</sub>>]
       "2.2" [label=<<sub>6</sub>[.2.2]<sub>7</sub>>]
       "2.3" [label=<<sub>8</sub>[.2.3]<sub>9</sub>>]
       "2.4" [label=<<sub>10</sub>[.2.4]<sub>17</sub>>]
       "2.5" [label=<<sub>18</sub>[.2.5]<sub>19</sub>>]
       "2.4.1" [label=<<sub>11</sub>[.2.4.1]<sub>12</sub>>]
       "2.4.2" [label=<<sub>13</sub>[.2.4.2]<sub>14</sub>>]
       "2.4.3" [label=<<sub>15</sub>[.2.4.3]<sub>16</sub>>]

       "2" -> "2.1"
       "2" -> "2.2"
       "2" -> "2.3"
       "2" -> "2.4"
       "2" -> "2.5"

       "2.4" -> "2.4.1"
       "2.4" -> "2.4.2"
       "2.4" -> "2.4.3"
     }
    #+END_SRC

    #+RESULTS:
    [[file:nested-sets1.png]]

*** As a flat structure
    #+BEGIN_EXAMPLE
    (left=1 right=2 value=.1)
    (left=3 right=20 value=.2)
    (left=21 right=22 value=.3)
    (left=4 right=5 value=.2.1)
    (left=6 right=7 value=.2.2)
    (left=8 right=9 value=.2.3)
    (left=10 right=17 value=.2.4)
    (left=18 right=19 value=.2.5)
    (left=11 right=12 value=.2.4.1)
    (left=13 right=14 value=.2.4.2)
   (left=15 right=16 value=.2.4.3)
    #+END_EXAMPLE

*** Allowing O(n) lookups of subtrees
   #+BEGIN_SRC dot :file nested-sets-sub-tree.png :cmdline -Kdot -Tpng :cache true
     digraph {
       "1" [label=<<sub>1</sub>[.1]<sub>2</sub>>]
       "2" [label=<<sub>3</sub>[.2]<sub>20</sub>>]
       "3" [label=<<sub>21</sub>[.3]<sub>22</sub>>]
       "2.1" [label=<<sub>4</sub>[.2.1]<sub>5</sub>>]
       "2.2" [label=<<sub>6</sub>[.2.2]<sub>7</sub>>]
       "2.3" [label=<<sub>8</sub>[.2.3]<sub>9</sub>>]
       "2.4" [label=<<sub>10</sub>[.2.4]<sub>17</sub>> color=red penwidth=2.0]
       "2.5" [label=<<sub>18</sub>[.2.5]<sub>19</sub>>]
       "2.4.1" [label=<<sub>11</sub>[.2.4.1]<sub>12</sub>> color=red penwidth=2.0]
       "2.4.2" [label=<<sub>13</sub>[.2.4.2]<sub>14</sub>> color=red penwidth=2.0]
       "2.4.3" [label=<<sub>15</sub>[.2.4.3]<sub>16</sub>> color=red penwidth=2.0]

       "2" -> "2.1"
       "2" -> "2.2"
       "2" -> "2.3"
       "2" -> "2.4"
       "2" -> "2.5"

       "2.4" -> "2.4.1" [color=red, penwidth=2.0]
       "2.4" -> "2.4.2" [color=red, penwidth=2.0]
       "2.4" -> "2.4.3" [color=red, penwidth=2.0]
     }
    #+END_SRC

    #+RESULTS:
    [[file:nested-sets-sub-tree.png]]

    #+BEGIN_SRC sql
      select * from "nested_sets"
      where left >= 10
      and right  <= 17
    #+END_SRC

    * + cost to reconstruct tree in memory O(n)
    * can be improved if depth is stored.

*** No free lunch
    Inserts and deletions are *expensive*
   #+BEGIN_SRC dot :file nested-sets-insert.png :cmdline -Kdot -Tpng
     digraph {
       "1" [label=<<sub>1</sub>[.1]<sub>2</sub>>]
       "2" [label=<<sub>3</sub>[.2]<sub><font color="red">22</font></sub>>]
       "3" [label=<<sub>21</sub>[.3]<sub><font color="red">24</font></sub>>]
       "2.1" [label=<<sub>4</sub>[.2.1]<sub>5</sub>>]
       "2.2" [label=<<sub>6</sub>[.2.2]<sub><font color="red">9</font></sub>>]
       "2.2.1" [label=<<sub>7</sub>[.2.2.1]<sub>8</sub>> color=blue penwidth=2.0]
       "2.3" [label=<<sub><font color="red">10</font></sub>[.2.3]<sub><font color="red">11</font></sub>>]
       "2.4" [label=<<sub><font color="red">12</font></sub>[.2.4]<sub><font color="red">19</font></sub>>]
       "2.4.1" [label=<<sub><font color="red">13</font></sub>[.2.4.1]<sub><font color="red">14</font></sub>>]
      "2.4.2" [label=<<sub><font color="red">15</font></sub>[.2.4.2]<sub><font color="red">16</font></sub>>]
       "2.4.3" [label=<<sub><font color="red">17</font></sub>[.2.4.3]<sub><font color="red">18</font></sub>>]
       "2.5" [label=<<sub><font color="red">20</font></sub>[.2.5]<sub><font color="red">21</font></sub>>]

       "2" -> "2.1"
       "2" -> "2.2"
       "2" -> "2.3"
       "2" -> "2.4"
       "2" -> "2.5"

       "2.2" -> "2.2.1" [color=blue penwidth=2.0]
       "2.4" -> "2.4.1"
       "2.4" -> "2.4.2"
       "2.4" -> "2.4.3"
     }
    #+END_SRC

    #+RESULTS:
    [[file:nested-sets-insert.png]]

    Inserting one node means updating the =right= value of all nodes above, and to our right
    and updating the =left= value of all nodes to our right.

*** Why do I care?
    Solidus uses the nested set model to store taxon information.

**  What is a Rational Number?
*** First, integers
    http://image.tutorvista.com/cms/images/38/positive-and-negative-number-line.jpg

    Integers are countably infinite

*** Rationals
    https://saylordotorg.github.io/text_elementary-algebra/section_04/f60f1d4c222a6b6f42852ae82d60fefb.jpg
    Rationals are uncountably infinite. There is an infinite number of rationals between 0 and 1.

** Using rationals instead of integers for left and right keys
   #+BEGIN_SRC dot :file nested-sets.png :cmdline -Kdot -Tpng :cache true
     digraph {
       "1" [label="[.1] 1/1"]
       "2" [label="[.2] 2/1"]
       "3" [label="[.3] 3/1"]
       "2.1" [label="[.2.1] 5/1"]
       "2.2" [label="[.2.2] 8/3"]
       "2.3" [label="[.2.3] 11/4"]
       "2.4" [label="[.2.4] 14/5"]
       "2.5" [label="[.2.5] 17/6"]
       "2.4.1" [label="[.2.4.1] 31/11"]
       "2.4.2" [label="[.2.4.2] 48/17"]
       "2.4.3" [label="[.2.4.3] 65/23"]

       "2" -> "2.1"
       "2" -> "2.2"
       "2" -> "2.3"
       "2" -> "2.4"
       "2" -> "2.5"

       "2.4" -> "2.4.1"
       "2.4" -> "2.4.2"
       "2.4" -> "2.4.3"
     }
    #+END_SRC

    #+RESULTS:
    [[file:nested-sets.png]]

    Use a single node key

** Node Key
   We can write the node as [TreePosition]nv/dv

** Determining nv and dv
   file:/home/dylan/Pictures/eq.png


** How do we use this to our advantage?

#+BEGIN_NOTES
- represent as a fraction
- integers are countably infinite
#+END_NOTES

   #+BEGIN_SRC dot :file nested-sets-insert.png :cmdline -Kdot -Tpng
     digraph {
       "1" [label=<<sub>1</sub>[.1]<sub>2</sub>>]
       "2" [label=<<sub>3</sub>[.2]<sub><font color="red">22</font></sub>>]
       "3" [label=<<sub>21</sub>[.3]<sub><font color="red">24</font></sub>>]
       "2.1" [label=<<sub>4</sub>[.2.1]<sub>5</sub>>]
       "2.2" [label=<<sub>6</sub>[.2.2]<sub><font color="red">9</font></sub>>]
       "2.2.1" [label=<<sub>7</sub>[.2.2.1]<sub>8</sub>> color=blue penwidth=2.0]
       "2.3" [label=<<sub><font color="red">10</font></sub>[.2.3]<sub><font color="red">11</font></sub>>]
       "2.4" [label=<<sub><font color="red">12</font></sub>[.2.4]<sub><font color="red">19</font></sub>>]
       "2.4.1" [label=<<sub><font color="red">13</font></sub>[.2.4.1]<sub><font color="red">14</font></sub>>]
      "2.4.2" [label=<<sub><font color="red">15</font></sub>[.2.4.2]<sub><font color="red">16</font></sub>>]
       "2.4.3" [label=<<sub><font color="red">17</font></sub>[.2.4.3]<sub><font color="red">18</font></sub>>]
       "2.5" [label=<<sub><font color="red">20</font></sub>[.2.5]<sub><font color="red">21</font></sub>>]

       "2" -> "2.1"
       "2" -> "2.2"
       "2" -> "2.3"
       "2" -> "2.4"
       "2" -> "2.5"

       "2.2" -> "2.2.1" [color=blue penwidth=2.0]
       "2.4" -> "2.4.1"
       "2.4" -> "2.4.2"
       "2.4" -> "2.4.3"
     }
    #+END_SRC

    #+RESULTS:
    [[file:nested-sets-insert.png]]

    As you might recall the problem with nested sets was that every insert required updating the keys.


* Bibliography
  - Hazel, D. (2008). Using rational numbers to key nested sets. CoRR, abs/0806.3115.
